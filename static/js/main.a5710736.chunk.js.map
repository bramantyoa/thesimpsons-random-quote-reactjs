{"version":3,"sources":["components/Index/quote.js","components/Index/author.js","components/Index/footer.js","screens/Index/index.js","App.js","serviceWorker.js","index.js"],"names":["Quote","react_default","a","createElement","id","this","props","data","quote","Component","Author","className","src","image","alt","character","Footer","href","ScreensIndex","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","quoteFetched","APIresponse","_this2","axios","get","then","response","setState","author","footer","App","Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAUeA,mLANP,OACIC,EAAAC,EAAAC,cAAA,MAAIC,GAAG,cAAaH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,QAAT,KAApB,IAA8CC,KAAKC,MAAMC,KAAKC,MAA9D,IAAqEP,EAAAC,EAAAC,cAAA,QAAMC,GAAG,QAAT,aAH7DK,aCWLC,mLATP,OACIT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,kBACXV,EAAAC,EAAAC,cAAA,OAAKS,IAAKP,KAAKC,MAAMC,KAAKM,MAAOC,IAAKT,KAAKC,MAAMC,KAAKQ,YACtDd,EAAAC,EAAAC,cAAA,MAAIC,GAAG,gBAAgBC,KAAKC,MAAMC,KAAKQ,mBALlCN,aCcNO,mLAZP,OACIf,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACXV,EAAAC,EAAAC,cAAA,uBACIF,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,WAAWM,KAAK,0CACzBhB,EAAAC,EAAAC,cAAA,QAAMC,GAAG,YAAT,gBAFR,sBAJKK,aC+CNS,cA1CX,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KAEDmB,MAAQ,CACTC,cAAc,EACdC,YAAa,IALFR,mFASC,IAAAS,EAAAvB,KAChBwB,IAAMC,IAAN,gDACKC,KAAK,SAAAC,GACF,IAAML,EAAcK,EAASzB,KAAK,GAClCqB,EAAKK,SAAS,CAAEP,cAAc,EAAMC,YAAaA,uCAKzD,OAAItB,KAAKoB,MAAMC,aAEPzB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,mBACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,cACfV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,iBACXV,EAAAC,EAAAC,cAACK,EAAD,CAAOD,KAAMF,KAAKoB,MAAME,cAExB1B,EAAAC,EAAAC,cAAC+B,EAAD,CAAQ3B,KAAMF,KAAKoB,MAAME,gBAG7B1B,EAAAC,EAAAC,cAACgC,EAAD,OAKJlC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,mBACXV,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,WAAb,cACAV,EAAAC,EAAAC,cAACgC,EAAD,cApCO1B,aCQZ2B,0LARX,OACEnC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACkC,EAAD,cAJU5B,cCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.a5710736.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Quote extends Component {\r\n    render() {\r\n        return (\r\n            <h1 id=\"quote-text\"><span id=\"tick\">\"</span> {this.props.data.quote} <span id=\"tick\">\"</span></h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quote;","import React, { Component } from 'react';\r\n\r\nclass Author extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"author-section\">\r\n                <img src={this.props.data.image} alt={this.props.data.character}/>\r\n                <h2 id=\"quote-author\">{this.props.data.character}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Author;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <p>quotes from\r\n                    <a className=\"no-style\" href=\"https://thesimpsonsquoteapi.glitch.me/\">\r\n                        <span id=\"simpsons\">theSimpsons</span>\r\n                    </a> quote API\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Quote from '../../components/Index/quote';\r\nimport Author from '../../components/Index/author';\r\nimport Footer from '../../components/Index/footer';\r\n\r\nclass ScreensIndex extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            quoteFetched: false,\r\n            APIresponse: {},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://thesimpsonsquoteapi.glitch.me/quotes`)\r\n            .then(response => {\r\n                const APIresponse = response.data[0];\r\n                this.setState({ quoteFetched: true, APIresponse: APIresponse });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.quoteFetched) {\r\n            return (\r\n                <div className=\"quote-container\">\r\n                    <div className=\"quote-main\">\r\n                    <div className=\"quote-section\">\r\n                        <Quote data={this.state.APIresponse} />\r\n                        \r\n                        <Author data={this.state.APIresponse} />\r\n                        </div>\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"quote-container\">\r\n                    <p className=\"loading\">Loading...</p>\r\n                    <Footer />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScreensIndex;","import React, { Component } from 'react';\r\nimport ScreensIndex from './screens/Index/index';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ScreensIndex />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}